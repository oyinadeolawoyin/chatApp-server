generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  password       String
  email          String    @unique
  country        String?   @default("Global")
  gender         String?   @default("They")
  image          String?
  bio            String?

  contacts       Contact[]
  groups         Group[]
  member         Member[]
  chats          Chat[]   @relation("ChatUsers")
  likes          Like[] 
  notifications  Notification[]
}

model Contact {
  id          Int       @id @default(autoincrement())
  friendName  String
  status      String    @default("unblock")
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  chats       Chat[]    @relation("ChatContacts")
}

model Group {
  id           Int       @id @default(autoincrement())
  groupName    String
  createdBy    User      @relation(fields: [createdById], references: [id])
  createdById  Int
  members      Member[]
  chats        Chat[]
}

model Member {
  id          Int       @id @default(autoincrement())
  memberName  String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  group       Group     @relation(fields: [groupId], references: [id])
  groupId     Int
}

model Chat {
  id              Int         @id @default(autoincrement())
  username        String
  content         String?
  image           String?    
  uploadedAt      DateTime?   @default(now())
  users           User[]      @relation("ChatUsers")
  contact         Contact[]   @relation("ChatContacts")
  group           Group?      @relation(fields: [groupId], references: [id])
  groupId         Int?
  likes           Like[]       
}

model Like {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  chat        Chat      @relation(fields: [chatId], references: [id])
  chatId      Int
}

model Notification {
  id        Int       @id @default(autoincrement())
  name      String
  action    String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
}